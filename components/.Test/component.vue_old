<template>
<div class="divi" :style="estilo">
      <p v-show="Error">{{ErrorMessage}}</p>
      <div class="tooltip">
      <span class='etiqueta' v-if="prop.Label">{{ prop.Label + " " }}</span>
      <section class="main"><slot></slot></section>
 
      <span v-if="prop.ToolTipText" class="errortext">{{
        prop.ToolTipText
      }}</span>
    </div>
  </div>
</template>
<script setup lang="ts">
import {
  //defineEmits,
  //defineProps,
  ref,
//  onUnmounted,
  watch,
//  toRefs,
// toRefs,
//toRef,
// onMounted,
// onBeforeUpdate,
// onUpdated,
// onUnmounted,

} from "vue";
const emit = defineEmits(["update", "update:Value", "update:Status","update:ErrorMessage.value"]);
//import { localDb } from "@/classes/LocalDb";  // manejo del indexedDb

///////////////////////////////////////
// Propiedades del componente reactivas
////////////////////////////////////
const props = defineProps<{
 
  prop: {
    Name:"";
    Label: "";
    ToolTipText: string;
    View: "";
    Field: "";
    Recno: "";
    Value: string;
    Placeholder: "";
    Format: "";
    InputMask: "";
    MaxLenght: 0;
    ReadOnly: false;
    Tag: "";
    Sw_val: false;
    Capture: true;
    Type: string;
    Visible: true;
    ControlSource: "";
    Status: string;
    ErrorMessage :'';
    Style: 'decimal'; // decimal, currency,percent,unit
    Currency: 'MXN'; //USD,EUR,MXN
    Decimals : 2;
 
 
  };

  estilo: {
    background: "white";
    padding: "5px"; // Relleno
    color: "#b94295";
    width: "500px";
    height: "30px";
    fontFamily: "Arial";
    fontSize: "13px"; // automaticamente vue lo cambiara por font-size (para eso se utiliza la anotacion Camello)
    textAlign: "left";
  };
  posicion: {
    position: "left"; //left,right,center,absolute. Si es absulute poner Value left y top
    left: number;
    Top: number;
  };
}>();

const Value = ref(props.prop.Value);
const Status = ref(props.prop.Status);
const Error = ref(false)
const ErrorMessage = ref(props.prop.ErrorMessage)

/*  position
static	Elements renders in order, as they appear in the document flow. This is default.
absolute	The element is positioned relative to its first positioned (not static) ancestor element
fixed	The element is positioned relative to the browser window
relative	The element is positioned relative to its normal position, so "left:20" adds 20 pixels to the element's LEFT position
sticky	The element is positioned based on the user's scroll position
A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).

Note: Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a Webkit prefix.
initial	Sets this property to its default value. Read about initial
inherit	Inherits this property from its parent element. Read about inherit
*/

// funciona para cualquier comoponente de este componente

/////////////////////////////////////////
// Metodo KeyPres Vfp
// Este metodo se corre cada ves que se teclea cualquier cosa en el componente
// Similar al keypress si  no esta el lasy
/////////////////////////////////////////

// string : String,
//texto: Number,
//boleano: Boolean,
// arreglo: Array,
// objeto: Object,
//fecha: Date,
//simbolo: Symbol,
// valida: Function,

// arreglo1: Object,
// default: () => {},
//    arreglo2: Array,
//    default: () => [],

// Vue dice no utilizar "this" dentro del setup segun Vue
// al pasarle props se podra tomar todos los Valuees de props anteriormente definidos
// como props.Value
//The second argument passed to the setup function is the context. The context is a normal JavaScript object that exposes
// three component properties:
// Attributes (Non-reactive object)
//    console.log(context.attrs)
// Slots (Non-reactive object)
//    console.log(context.slots)
// Emit Events (Method)
//    console.log(context.emit)
//setup(props,context)
//setup(props, { attrs, slots, emit })
// Setup funciona de la misma forma que el actual data(), devolviendo un objeto con las propiedades
// que serÃ¡n usadas en el template:
// Inicio Setup

////////////////////////////////////////
/*
    You can access or mutate the value of the ref object using the .value property but that's only inside the setup() method.
    In the corresponding template, you can use the name of the variable as usual i.e productName in our case.

    */

/////////////////////////////////////////
// Metodo on change Vfp cuando es Value por referencia
/////////////////////////////////////////

//@Emit()

/////////////////////////////////////////
// Metodo Release Vfp
/////////////////////////////////////////
/*
const onUnmounted = () => {
  //  console.log("Component unmounted!");
};
*/
/////////////////////////////////////////
// Vfp onFocus
///////////////////////////////////////

/*
export const onFocus = () => {
  console.log("============>Enfoco el elemento<============= ");
};

export const onfocus=onFocus (() => {
  This.parent.ctx[props.prop.Name]("onFocus", props.Value).then();
});
*/

//const LocalDb = new localDb();

/////////////////////////////////////////////////////////////////////
// Valid
// Descripcion: Cuando se cambie el valor del componente template (Value.value con el teclado),
//              tenemos que emitir hacia el padre el valor capturado (Value.value) y ejecutar el update
/////////////////////////////////////////////////////////////////
const valid = async  () => { 
  let  valor = props.prop.Type=='Text' ? '' : 0
  if (props.prop.Type=='N')
     valor = +Value.value;     
  else    
     valor = Value.value;     
   await LocalDb.update(valor) .then(() => { // actualiza valor en localDb
    emit("update:Value", Value.value); // actualiza el valor en el componente padre
    emit("update") // emite un update en el componente padre
    Status.value = 'A'
    emit("update:Status", Status.value); // actualiza el valor en el componente padre
    return true;
 })
};
/*
const updateData = async () => {
  const valor = +Value.value;
   await LocalDb.update(valor) .then(() => { // actualiza valor en localDb
    emit("update:Value", Value.value); // actualiza el valor en el componente padre
    emit("update") // emite un update en el componente padre
    Status.value = 'A'
    emit("update:Status", Status.value); // actualiza el valor en el componente padre
    return true;
  })

}
*/
/////////////////////////////////////////////////////////////////////
// onFocus
// Descripcion: Cuando se cambie el valor del componente template (Value.value con el teclado),
//              tenemos que emitir hacia el padre el valor capturado (Value.value) y ejecutar el update
/////////////////////////////////////////////////////////////////
const onFocus = () => {
  Status.value = 'P';  // en proceso
  Error.value= false ;
  ErrorMessage.value=''
  emit("update:Status", Status.value); // actualiza el valor en el componente padre
  emit("update:ErrorMessage.value",ErrorMessage.value)
 // emit("update") // emite un update en el componente padre

  // eslint-disable-next-line no-undef
 // emit("props.prop.status:Status", Status.value); // actualiza el valor en el componente padre
  console.log('Cambio el valor del status a ===>', Status.value)

}

////////////////////////////////////////
// Watchers : Triggers de templates
// Descripcion : Cuando cambia el Value de la propiedad del ControlSource, asigna el Value de
//                la vista a la propiedad de Value de la propiedad
// Notas : Si se tiene en props, se tiene que vigilar el cambio de props.prop.Value

////////////////////////////////////////
// ControlSource
watch(
  () => props.prop.ControlSource,
  (new_val, old_val) => {
    LocalDb.ControlSource = new_val;
  },
  { deep: false }
);

/////////////////////////////////////////
// ErrorMesagge
watch(
  () => props.prop.ErrorMessage,
  (new_val, old_val) => {
    Error.value=true;
  },
  { deep: false }
);

/////////////////////////////////////////////////////////
// watch Value
//  Nota : Si se cambia el valor desde la forma principal, se debe de actualizar en el
//          Componente
//////////////////////////////////////////
watch(
  () => props.prop.Value,
  (new_val, old_val) => {
    Value.value = new_val;
  },
  { deep: false }
);

/////////////////////////////////////////
// Metodo init Vfp
// Aqui debemos de asignar todos los Valores inciales del componente
// A pesar que nom_nom se pasa por referencia, se tuvo que definir en props para qu fuera reactivo
// Se tiene que emitir para que cambie el Valor en el template
/////////////////////////////////////////
const init = async () => {
  Status.value = 'A';
  //Value.value = 0; // asignamos Valor inicial
};


init(); // Ejecuta el init
</script>
