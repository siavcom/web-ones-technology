<div :collapse="isCollapsed">




https://masteringnuxt.com/blog/24-time-saving-tips-for-nuxt3

3. Use the built-in key-value storage

In Nuxt we can use a simple, but powerful, built-in key-value storage:

const storage = useStorage();
const key = `session:token`;

// Save the value
await storage.setItem(key, sessionToken);

// ...and retrieve it in a different API call
const token = await storage.getItem(key);

===================  Using asset directory ========

The ~/assets folder in Nuxt 3 is ideal for assets that need processing.

eg. images, stylesheets, icons, and fonts.

When you import an asset from this folder, the bundler processes the file, generates a new filename with a hash, and replaces the import with the new filename.

import image from '~/assets/image.png';
import style from '~/assets/style.css';

The ~/assets folder has the added benefit of catching missing assets during the build process.

If an asset is missing, you'll get a build error, which helps you maintain your app's integrity.

This won't happen with assets in the ~/public folder since they aren't processed.

// Importing from ~/assets will catch missing assets
import missingImage from '~/assets/missing-image.png'; // Build error

// Referencing from ~/public won't catch missing assets
// In your template: <img src="/missing-image.png" /> // No build error






// Using ~/assets



<script setup>
import image from '~/assets/image.png';
</script>
<template>
  <img :src="image" />
</template>

// Using ~/public
<template>
  <img src="/image.png" />
</template>

================ Modificadores de eventos click onFocuse lostFocues etc============



    .stop - Stop the eventâ€™s propagation to other handlers
    .prevent - Prevent default handling of the event (like a page reload for a form submission)
    .self - Only fire events for this element, not children
    .capture - Handle the event here before handling it at the child level
    .once - Trigger this event once at most
    .passive - Process the default behavior immediately, and also handle it here without blocking

